#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import random
from common import *

class MessageStore:

    def __init__(self):
        self.messages = {}

    def add(self, address, message):
        queue = self.messages.get(address)
        if queue is None:
            queue = []
            self.messages[address] = queue
        queue.append(message)

    def get(self, address):
        queue = self.messages.get(address)
        if queue is not None:
            msg = queue.pop(0)
            if not queue: del self.messages[address]
            return msg

class Server(EventDispatcher):

    def __init__(self, router):
        self.router = router
        self.tag = 0
        self.messages = MessageStore()

    def next_tag(self):
        result = "tag%s" % self.tag
        self.tag += 1
        return result

    def send(self, address, snd=None):
        if snd is None:
            links = self.router.outgoing(address)
            snd = links.choose()
            if snd is None: return 0

        count = 0
        while snd.credit:
            msg = self.messages.get(address)
            if not msg:
                snd.drained()
                return count
            dlv = snd.delivery(self.next_tag())
            snd.send(msg)
            dlv.settle()
            count += 1
            print "Sent message(%s): %s" % (address, msg)

        return count

    def link_flow(self, event):
        if event.link.is_sender:
            snd = event.link
            self.send(snd.source.address or snd.target.address, snd)

    def delivery(self, event):
        dlv = event.delivery
        if dlv.link.is_receiver and not dlv.partial:
            address = dlv.link.target.address
            msg = dlv.link.recv(dlv.pending)
            self.messages.add(address, msg)
            dlv.update(Delivery.ACCEPTED)
            dlv.settle()
            print "Got message(%s): %s" % (address, msg)
            self.send(address)

coll = Collector()
router = Router()
drv = Driver(coll, FlowController(1024), Handshaker(), router, Server(router))
acc = Acceptor(drv, "localhost", 5672)
drv.run()
