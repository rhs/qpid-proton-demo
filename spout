#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
import sys
from common import *

class Spout(EventDispatcher):

    def __init__(self, count, quiet):
        self.count = count
        self.quiet = quiet
        self.sent = 0
        self.settled = 0

    def link_flow(self, event):
        link = event.link
        while self.sent < self.count and link.credit > 0:
            dlv = link.delivery("spout-%s" % self.sent)
            msg = "Hello World! [%s]" % self.sent
            link.send(msg)
            link.advance()
            if not self.quiet:
                print "Sent %s to %s: %s" % (dlv.tag, link.target.address, msg)
            self.sent += 1

    def delivery(self, event):
        dlv = event.delivery
        if dlv.settled:
            if not self.quiet:
                print "Settled %s: %s" % (dlv.tag, dlv.remote_state)
            self.settled += 1
            dlv.settle()
        if self.settled >= self.count:
            event.connection.close()

    def connection_remote_close(self, event):
        print "Sent %s messages" % self.settled
        drv.exit()

switches = [a for a in sys.argv[1:] if a.startswith("-")]
args = [a for a in sys.argv[1:] if not a.startswith("-")]

quiet = "-q" in switches
address = args.pop(0) if args and args[0].startswith("/") else "//localhost"
count = int(args.pop(0)) if args else 1

coll = Collector()
pool = Pool(coll)
pool.outgoing(address)
drv = Driver(coll, Spout(count, quiet))
drv.run()
